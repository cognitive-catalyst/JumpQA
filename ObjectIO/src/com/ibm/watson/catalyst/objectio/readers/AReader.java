/*******************************************************************************
 * Copyright 2015 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.ibm.watson.catalyst.objectio.readers;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

/**
 * An abstract class for object readers. A class which implements this abstract
 * class only needs to describe what to do with an input stream.
 * 
 * @author Will Beason
 * @version 0.1.0
 * @param <T> The type of object returned by the reader
 * @since 0.1.0
 *
 */
public abstract class AReader<T> implements IReader {
  
  @Override
  public List<T> read(List<String> strings) {
    List<T> result = new ArrayList<T>();
    strings.stream().forEachOrdered((s) -> {
      if (!isCommentOrEmpty(s)) result.add(string2Object(s));
    });
    return result;
  }
  
  /**
   * TODO: Method description
   * 
   * @param line the string to read
   * @return the object generated by the string
   */
  protected abstract T string2Object(String aString);
  
  @Override
  public List<T> read(File aFile) {
    if (aFile.toString().equals("")) return new ArrayList<T>();
    try {
      return read(Files.readAllLines(aFile.toPath(), StandardCharsets.UTF_8));
    } catch (final FileNotFoundException e) {
      throw new RuntimeException("Unable to find " + aFile, e);
    } catch (final IOException e) {
      throw new RuntimeException("IOError reading " + aFile, e);
    } catch (final RuntimeException e) {
      throw new RuntimeException("Error reading " + aFile, e);
    }
  }
  
  @Override
  public List<T> readFile(String aFile) {
    if (aFile.equals("")) return new ArrayList<T>();
    return read(new File(aFile));
  }
  
  @Override
  public List<T> read(String aString) {
    return read(Arrays.asList(PARAGRAPH.split(aString)));
  }
  
  /**
   * Checks if the line is a comment or empty.
   * 
   * @param aLine
   * @return
   */
  protected static boolean isCommentOrEmpty(String aLine) {
    return isComment(aLine) || aLine.equals("");
  }
  
  /**
   * Checks if a line is a comment.
   * 
   * @param aLine
   * @return
   */
  protected static boolean isComment(String aLine) {
    return COMMENT.matcher(aLine).find();
  }
  
  private static final Pattern COMMENT = Pattern.compile("^#");
  private static final Pattern PARAGRAPH = Pattern.compile("(\r)?\n");
  
}
